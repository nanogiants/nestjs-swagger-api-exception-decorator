// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Decorator @ApiException - multiple exceptions given exceptions mismatching http status codes should build the api-response payload properly 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "CustomBadRequestException": {
            "description": "Bad Request",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Bad Request",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
  "404": {
    "content": {
      "application/json": {
        "examples": {
          "NotFoundException": {
            "description": "Not Found",
            "value": {
              "description": "Not Found",
              "statusCode": 404,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Not Found",
              "type": "string",
            },
            "statusCode": {
              "example": 404,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator @ApiException - multiple exceptions given valid HttpExceptions should be consecutive numbered should build the api-response payload properly 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "BadRequestException": {
            "description": "Bad Request",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Bad Request",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
  "404": {
    "content": {
      "application/json": {
        "examples": {
          "NotFoundException #1": {
            "description": "Not Found",
            "value": {
              "description": "Not Found",
              "statusCode": 404,
            },
          },
          "NotFoundException #2": {
            "description": "Not Found",
            "value": {
              "description": "Not Found",
              "statusCode": 404,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Not Found",
              "type": "string",
            },
            "statusCode": {
              "example": 404,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator @ApiException - multiple exceptions given valid subclassed HttpExceptions should build the api-response payload properly 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "CustomBadRequestException": {
          "description": "Bad Request",
          "value": {
            "description": "Bad Request",
            "statusCode": 400,
          },
        },
        "CustomBadRequestException2": {
          "description": "Bad Request 2",
          "value": {
            "description": "Bad Request 2",
            "statusCode": 400,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "description": {
            "example": "Bad Request",
            "type": "string",
          },
          "statusCode": {
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "description",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 400,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS built in exception (forbidden exception) without template or description should use the default template including the error property 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "ForbiddenException": {
          "description": "Forbidden",
          "value": {
            "error": "Forbidden",
            "message": "Forbidden",
            "statusCode": 403,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "error": {
            "example": "Forbidden",
            "type": "string",
          },
          "message": {
            "example": "Forbidden",
            "type": "string",
          },
          "statusCode": {
            "example": 403,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 403,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS built in exception without template but with description and schema should use the default template 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "BadRequestException": {
          "description": "This is a test",
          "value": {
            "error": "Bad Request",
            "message": "Bad Request",
            "statusCode": 400,
          },
        },
      },
      "schema": {
        "description": "This is a test",
        "properties": {
          "error": {
            "example": "Bad Request",
            "type": "string",
          },
          "message": {
            "description": "custom message schema",
            "example": {
              "test": {},
            },
            "type": "string",
          },
          "statusCode": {
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 400,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS built in exception without template but with description should use the default template 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "BadRequestException": {
          "description": "This is a test",
          "value": {
            "error": "Bad Request",
            "message": "Bad Request",
            "statusCode": 400,
          },
        },
      },
      "schema": {
        "description": "This is a test",
        "properties": {
          "error": {
            "example": "Bad Request",
            "type": "string",
          },
          "message": {
            "example": "Bad Request",
            "type": "string",
          },
          "statusCode": {
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 400,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS built in exception without template but with type and isArray equal true should use the default template 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "BadRequestException": {
          "description": "Bad Request",
          "value": {
            "error": "Bad Request",
            "message": [
              {
                "property1": "Number",
                "property2": {
                  "property3": "Number",
                  "subsub": [
                    {
                      "bool": "Boolean",
                      "desc": "Bad Request",
                      "exampleEnum": "LOG",
                    },
                  ],
                },
                "property4": "Boolean",
                "statusCode": 400,
              },
            ],
            "statusCode": 400,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "error": {
            "example": "Bad Request",
            "type": "string",
          },
          "message": {
            "items": {
              "$ref": "#/components/schemas/SwaggerAnnotations",
              "type": "object",
            },
            "type": "array",
          },
          "statusCode": {
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 400,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS built in exception without template but with type should use the default template 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "BadRequestException": {
          "description": "Bad Request",
          "value": {
            "error": "Bad Request",
            "message": {
              "property1": "Number",
              "property2": {
                "property3": "Number",
                "subsub": [
                  {
                    "bool": "Boolean",
                    "desc": "Bad Request",
                    "exampleEnum": "LOG",
                  },
                ],
              },
              "property4": "Boolean",
              "statusCode": 400,
            },
            "statusCode": 400,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "error": {
            "example": "Bad Request",
            "type": "string",
          },
          "message": {
            "$ref": "#/components/schemas/SwaggerAnnotations",
          },
          "statusCode": {
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 400,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS built in exception without template or description should use the default template 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "BadRequestException": {
          "description": "Bad Request",
          "value": {
            "error": "Bad Request",
            "message": "Bad Request",
            "statusCode": 400,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "error": {
            "example": "Bad Request",
            "type": "string",
          },
          "message": {
            "example": "Bad Request",
            "type": "string",
          },
          "statusCode": {
            "example": 400,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 400,
  "type": undefined,
}
`;

exports[`Decorator @ApiException - single exception given valid NestJS subclassed exception without error should use the default template 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "ExceptionWithoutError": {
          "description": "test",
          "value": {
            "error": "test",
            "message": "test",
            "statusCode": 401,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "error": {
            "example": "test",
            "type": "string",
          },
          "message": {
            "example": "test",
            "type": "string",
          },
          "statusCode": {
            "example": 401,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "message",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 401,
  "type": undefined,
}
`;

exports[`Decorator @TemplatedApiException - single exception given a directly instantiated exception should should use the already instantiated exception 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "CustomNotFoundExceptionWithArrayMessage": {
          "description": "hallo",
          "value": {
            "description": "hallo",
            "statusCode": 404,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "description": {
            "example": "hallo",
            "type": "string",
          },
          "statusCode": {
            "example": 404,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "description",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 404,
  "type": undefined,
}
`;

exports[`Decorator @TemplatedApiException - single exception given a template which does not contain an available placeholder should should use the already instantiated exception 1`] = `
{
  "404": {
    "content": {
      "application/json": {
        "examples": {
          "NotFoundException": {
            "description": "Not Found",
            "value": {
              "test": "test",
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "test": {
              "example": "test",
              "type": "string",
            },
          },
          "required": [
            "test",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator @TemplatedApiException - single exception given no template should should use the already instantiated exception 1`] = `
{
  "404": {
    "content": {
      "application/json": {
        "examples": {
          "NotFoundException": {
            "description": "Not Found",
            "value": {
              "error": "Not Found",
              "message": "Not Found",
              "statusCode": 404,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "error": {
              "example": "Not Found",
              "type": "string",
            },
            "message": {
              "example": "Not Found",
              "type": "string",
            },
            "statusCode": {
              "example": 404,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "message",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator @TemplatedApiException - single exception given valid subclassed HttpException should build the api-response payload properly 1`] = `
{
  "content": {
    "application/json": {
      "examples": {
        "NotFoundException": {
          "description": "Not Found",
          "value": {
            "description": "Not Found",
            "statusCode": 404,
          },
        },
      },
      "schema": {
        "description": undefined,
        "properties": {
          "description": {
            "example": "Not Found",
            "type": "string",
          },
          "statusCode": {
            "example": 404,
            "type": "number",
          },
        },
        "required": [
          "statusCode",
          "description",
        ],
        "type": "object",
      },
    },
  },
  "description": "",
  "isArray": undefined,
  "status": 404,
  "type": undefined,
}
`;

exports[`Decorator @TemplatedApiExceptionWithCustomPlaceholder - with some custom placeholders should properly use the custom placeholder resolvers 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "BadRequestException": {
            "description": "Bad Request",
            "value": {
              "description": "Bad Request",
              "error": "Bad Request",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Bad Request",
              "type": "string",
            },
            "error": {
              "example": "Bad Request",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "description",
            "statusCode",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
  "401": {
    "content": {
      "application/json": {
        "examples": {
          "UserUnauthorizedException": {
            "description": "User is not authorized",
            "value": {
              "clientCode": 1000,
              "description": "User is not authorized",
              "error": "Unauthorized",
              "statusCode": 401,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "clientCode": {
              "example": 1000,
              "type": "number",
            },
            "description": {
              "example": "User is not authorized",
              "type": "string",
            },
            "error": {
              "example": "Unauthorized",
              "type": "string",
            },
            "statusCode": {
              "example": 401,
              "type": "number",
            },
          },
          "required": [
            "description",
            "statusCode",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator @TemplatedApiExceptionWithRequiredProperties - with some required properties should properly define the required properties 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "CustomBadRequestException": {
            "description": "Bad Request",
            "value": {
              "description": "Bad Request",
              "error": "Bad Request",
              "fixedValue": 123,
              "reasons": [],
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Bad Request",
              "type": "string",
            },
            "error": {
              "example": "Bad Request",
              "type": "string",
            },
            "fixedValue": {
              "example": 123,
              "type": "number",
            },
            "reasons": {
              "example": [],
              "type": "object",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "description",
            "reasons",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
  "404": {
    "content": {
      "application/json": {
        "examples": {
          "CustomNotFoundException": {
            "description": "Custom Not Found",
            "value": {
              "description": "Custom Not Found",
              "error": "Not Found",
              "fixedValue": 123,
              "reasons": [],
              "statusCode": 404,
            },
          },
          "CustomNotFoundExceptionWithArrayMessage": {
            "description": "hallo",
            "value": {
              "description": "hallo",
              "error": "Not Found",
              "fixedValue": 123,
              "reasons": [],
              "statusCode": 404,
            },
          },
          "NotFoundException": {
            "description": "Not Found",
            "value": {
              "description": "Not Found",
              "error": "Not Found",
              "fixedValue": 123,
              "reasons": [],
              "statusCode": 404,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "hallo",
              "type": "string",
            },
            "error": {
              "example": "Not Found",
              "type": "string",
            },
            "fixedValue": {
              "example": 123,
              "type": "number",
            },
            "reasons": {
              "example": [],
              "type": "object",
            },
            "statusCode": {
              "example": 404,
              "type": "number",
            },
          },
          "required": [
            "description",
            "reasons",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator @TemplatedApiExceptionWithTemplateType should properly use the template type 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "BadRequestException": {
            "description": "Bad Request",
            "value": {
              "error": [
                "Bad Request",
              ],
              "message": "Bad Request",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "error": {
              "example": [
                "Bad Request",
              ],
              "type": "object",
            },
            "message": {
              "example": "Bad Request",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "message",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
  "401": {
    "content": {
      "application/json": {
        "examples": {
          "UserUnauthorizedException": {
            "description": "User is not authorized",
            "value": {
              "error": [
                "Unauthorized",
              ],
              "message": "User is not authorized",
              "statusCode": 401,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "error": {
              "example": [
                "Unauthorized",
              ],
              "type": "object",
            },
            "message": {
              "example": "User is not authorized",
              "type": "string",
            },
            "statusCode": {
              "example": 401,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "message",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator usage of multiple @ApiException given multiple @ApiException decorators when method has @ApiOperation attached should be grouped correctly 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "CustomBadRequestException": {
            "description": "Bad Request",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "Bad Request",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
  "404": {
    "content": {
      "application/json": {
        "examples": {
          "CustomNotFoundException": {
            "description": "Custom Not Found",
            "value": {
              "description": "Custom Not Found",
              "statusCode": 404,
            },
          },
          "CustomNotFoundExceptionWithArrayMessage": {
            "description": "hallo",
            "value": {
              "description": "hallo",
              "statusCode": 404,
            },
          },
          "NotFoundException": {
            "description": "Not Found",
            "value": {
              "description": "Not Found",
              "statusCode": 404,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "hallo",
              "type": "string",
            },
            "statusCode": {
              "example": 404,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator usage of multiple @ApiException when method has the same exception attached multiple times, but with different descriptions should group the exceptions properly 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "CustomBadRequestException #1": {
            "description": "One more just for testing",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
          "CustomBadRequestException #2": {
            "description": "Test",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
          "CustomBadRequestException #3": {
            "description": "Bad Request",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
          "CustomBadRequestException #4": {
            "description": "One more at class level",
            "value": {
              "description": "Bad Request",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": "One more just for testing",
          "properties": {
            "description": {
              "example": "Bad Request",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;

exports[`Decorator usage of multiple @ApiException when method has the same exception attached multiple times, but with different instantiated exceptions should group the exceptions properly 1`] = `
{
  "400": {
    "content": {
      "application/json": {
        "examples": {
          "BadRequestException #1": {
            "description": "test",
            "value": {
              "description": "test",
              "statusCode": 400,
            },
          },
          "BadRequestException #2": {
            "description": "test 2",
            "value": {
              "description": "test 2",
              "statusCode": 400,
            },
          },
        },
        "schema": {
          "description": undefined,
          "properties": {
            "description": {
              "example": "test",
              "type": "string",
            },
            "statusCode": {
              "example": 400,
              "type": "number",
            },
          },
          "required": [
            "statusCode",
            "description",
          ],
          "type": "object",
        },
      },
    },
    "description": "",
    "isArray": undefined,
    "type": undefined,
  },
}
`;
